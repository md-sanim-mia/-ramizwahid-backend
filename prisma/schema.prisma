generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  fullName          String
  email             String         @unique
  password          String
  profilePic        String?        @default("")
  passwordChangedAt DateTime?
  isVerified        Boolean        @default(false)
  isResetPassword   Boolean        @default(false)
  canResetPassword  Boolean        @default(false)
  isResentOtp       Boolean        @default(false)
  role              UserRole       @default(USER)
  isSubscribed      Boolean        @default(false)
  planExpiration    DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  Subscription      Subscription[]
 uploads           Upload[]
  morphVideos       MorphVideo[]
  @@map("users")
}

model Plan {
  id            String         @id @default(uuid())
  planName      String
  amount        Float
  currency      String?
  interval      Interval       @default(month)
  intervalCount Int
  freeTrialDays Int?
  productId     String
  priceId       String
  active        Boolean
  description   String?
  features      Json?
  Subscription  Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("plans")
}

model Subscription {
  id              String        @id @default(uuid())
  userId          String        @unique
  planId          String
  startDate       DateTime
  endDate         DateTime?
  amount          Float
  stripePaymentId String        @unique
  paymentStatus   PaymentStatus @default(PENDING)
  user            User?         @relation(fields: [userId], references: [id])
  plan            Plan?         @relation(fields: [planId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("subscriptions")
}


model Upload {
  id          String   @id @default(uuid())
  userId      String
  imageUrl    String   // Path to stored image
  fileSize    Int
  mimetype    String
  status      UploadStatus @default(PROCESSING)
  consentGiven Boolean @default(false)
  createdAt   DateTime @default(now())
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches     Match[]
  morphVideos MorphVideo[]
  
  @@map("uploads")
}

model Match {
  id          String   @id @default(uuid())
  uploadId    String
  celebrityId String
  similarity  Float    // 0-100 percentage
  rank        Int      // Ranking position (1st, 2nd, 3rd, etc.)
  metadata    Json?    // Additional match data
   watermark   Boolean  @default(true)
  // Relationships
  upload      Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  celebrity   Celebrity @relation(fields: [celebrityId], references: [id])
  morphVideos MorphVideo[]
  
  @@unique([uploadId, rank])
  @@map("matches")
}

model Celebrity {
  id          String   @id @default(uuid())
  name        String
  imageUrl    String
  category    String?  // actor, singer, politician, etc.
  popularity  Int?     // For ranking purposes
  embeddings  Json?    // Facial embeddings data
  isActive    Boolean  @default(true)
  
  // Relationships
  matches     Match[]
  
  @@map("celebrities")
}

model MorphVideo {
  id          String   @id @default(ulid())
  userId      String
  uploadId    String
  matchId     String
  videoUrl    String
  duration    Int      // Duration in seconds
  status      MorphStatus @default(GENERATING)
  watermark   Boolean  @default(true)
  resolution  String   @default("720p")
  createdAt   DateTime @default(now())
  
  // Relationships
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  upload      Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  
  @@map("morph_videos")
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  image       String
  category    String
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Interval {
  day 
  week
  month
  year
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum Status {
  PROCESSING
  COMPLETED
  FAILED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}
enum UploadStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum MorphStatus {
  GENERATING
  COMPLETED
  FAILED
  }
